
RazerGun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fb  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000817  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  0000134a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	3a c0       	rjmp	.+116    	; 0x12a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include <util/delay.h>
unsigned char digit[10] = {0x3F, 0x06, 0x5B, 0x4f, 0x66, 0x6D, 0x7D, 0x27,0x7F, 0x6F};
int main()
{
	int i = 9;
	DDRE = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x00;
  c0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTE = digit[i];
  c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
  c8:	83 b9       	out	0x03, r24	; 3
#define F_CPU 16000000UL
#include <util/delay.h>
unsigned char digit[10] = {0x3F, 0x06, 0x5B, 0x4f, 0x66, 0x6D, 0x7D, 0x27,0x7F, 0x6F};
int main()
{
	int i = 9;
  ca:	29 e0       	ldi	r18, 0x09	; 9
  cc:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{		
		if(i == 0){
			PORTA == 0x00;
		}
		else if((PING & 0x01) == 0x00){
  ce:	e3 e6       	ldi	r30, 0x63	; 99
  d0:	f0 e0       	ldi	r31, 0x00	; 0
				_delay_ms(10);
			}
		}
		else
		{	
			PORTF = 0x00;
  d2:	a2 e6       	ldi	r26, 0x62	; 98
  d4:	b0 e0       	ldi	r27, 0x00	; 0
			PORTA == 0x00;
		}
		else if((PING & 0x01) == 0x00){
			i = i - 1;
			PORTE = digit[i];
			PORTF = 0xff;
  d6:	9f ef       	ldi	r25, 0xFF	; 255
	DDRF = 0xff;
	DDRG = 0x00;
	PORTE = digit[i];
	while(1)
	{		
		if(i == 0){
  d8:	21 15       	cp	r18, r1
  da:	31 05       	cpc	r19, r1
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x2a>
			PORTA == 0x00;
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <main+0x20>
		}
		else if((PING & 0x01) == 0x00){
  e2:	80 81       	ld	r24, Z
  e4:	80 fd       	sbrc	r24, 0
  e6:	1f c0       	rjmp	.+62     	; 0x126 <main+0x6e>
			i = i - 1;
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
			PORTE = digit[i];
  ec:	e9 01       	movw	r28, r18
  ee:	c0 50       	subi	r28, 0x00	; 0
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	88 81       	ld	r24, Y
  f4:	83 b9       	out	0x03, r24	; 3
			PORTF = 0xff;
  f6:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	4f ef       	ldi	r20, 0xFF	; 255
  fa:	59 e6       	ldi	r21, 0x69	; 105
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	50 40       	sbci	r21, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x46>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x50>
 108:	00 00       	nop
			_delay_ms(500);
			PORTF = 0x00;
 10a:	1c 92       	st	X, r1
			while((PING & 0x01) == 0x00){
 10c:	80 81       	ld	r24, Z
 10e:	80 fd       	sbrc	r24, 0
 110:	e3 cf       	rjmp	.-58     	; 0xd8 <main+0x20>
 112:	cf e3       	ldi	r28, 0x3F	; 63
 114:	dc e9       	ldi	r29, 0x9C	; 156
 116:	21 97       	sbiw	r28, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x5e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x64>
 11c:	00 00       	nop
 11e:	80 81       	ld	r24, Z
 120:	80 ff       	sbrs	r24, 0
 122:	f7 cf       	rjmp	.-18     	; 0x112 <main+0x5a>
 124:	d9 cf       	rjmp	.-78     	; 0xd8 <main+0x20>
				_delay_ms(10);
			}
		}
		else
		{	
			PORTF = 0x00;
 126:	1c 92       	st	X, r1
 128:	d7 cf       	rjmp	.-82     	; 0xd8 <main+0x20>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
